--region *.lua
--Date
--此文件由[BabeLua]插件自动生成
local raw_get = rawget
local set_metatable = setmetatable
classes = set_metatable({}, 
{
	__index = function(tab, key)
		if key == nil then Log.Error("classes: try to find a class with name:nil") end
		local type = raw_get(tab, key)
		if type == nil then
			Log.Error("classes: this class is not import yet:" .. key)
		end
		return type
	end
}) 



function class(classname, super)
	-- 为了支持旧的 class
	if classname ~= nil and super == nil then
		super = classname
	end

	local superType = type(super)
	local classType
	if superType ~= 'function' and superType ~= 'table' then
		superType = nil
		super = nil
	end

	-- 实际上在 Unity XLua 里面用不上
	if superType == 'function' or (super and super.__ctype == 1) then
		-- inherited from native C++ Object
		classType = {}
		if superType == 'table' then
			-- copy fields from super
			for k,v in pairs(super) do cls[k] = v end
			classType.__create = super.__create
			classType.super = super
		else
			classType.__create = super
			classType.ctor = function() end
		end
		classType.__cname = classname
		classType.__ctype = 1

		function classType.new(...)
			local instance = classType.__create(...)
			-- copy fields from class to  native object
			for k, v in pairs(classType) do instance[k] = v end
			instance.class = classType
			instance:ctor(...)
			return instance
		end
	else
		-- inherited from Lua Object
		if super then
			classType = {}
			setmetatable(classType, {__index = super})
			classType.super = super
		else
			classType = {ctor = function() end}
		end
		classType.__cname = classname
		classType.__ctype = 2 --lua
		classType.__index = classType

		function classType.new(...)
			local instance = setmetatable({}, classType)
			instance.class = classType
			-- instance:ctor(...)
			do
				local create
				-- create ：实现主动调用父类的 ctor
				create = function(c,...)
					if c.super then
						create(c.super,...)
					end
					if c.ctor then
						c.ctor(instance,...)
					end
				end
 
				create(classType,...)
			end

			return instance
		end
	end

	if type(classname) == "string" then
		classes[classname] = classType
	end
	return classType
end

function string.split(str, delimiter)
    str = tostring(str)
    delimiter = tostring(delimiter)
    if (delimiter=='') then return false end
    local pos,arr = 0, {}
    -- for each divider found
    for st,sp in function() return string.find(str, delimiter, pos, true) end do
        table.insert(arr, string.sub(str, pos, st - 1))
        pos = sp + 1
    end
    table.insert(arr, string.sub(str, pos))
    return arr
end

function import(moduleName, currentModuleName)
    local currentModuleNameParts
    local moduleFullName = moduleName
    local offset = 1

    while true do
        if string.byte(moduleName, offset) ~= 46 then -- .
            moduleFullName = string.sub(moduleName, offset)
            if currentModuleNameParts and #currentModuleNameParts > 0 then
                moduleFullName = table.concat(currentModuleNameParts, ".") .. "." .. moduleFullName
            end
            break
        end
        offset = offset + 1

        if not currentModuleNameParts then
            if not currentModuleName then
                local n,v = debug.getlocal(3, 1)
                currentModuleName = v
            end

            currentModuleNameParts = string.split(currentModuleName, ".")
        end
        table.remove(currentModuleNameParts, #currentModuleNameParts)
    end

    return require(moduleFullName)
end